"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chainToParts = exports.isRestEndptLive = exports.queryChainIdWithRest = exports.Devnet = exports.IncentivizedTestnet = exports.Localnet = exports.CustomChain = void 0;
const cross_fetch_1 = require("cross-fetch");
const types_1 = require("./types");
/** CustomChain is a convenience class for intializing the endpoints of a chain
 * based on its chain ID.
 *
 * @example
 * ```ts
 * export const TEST_CHAIN = new CustomChain({
 *   prefix: "nibiru",
 *   shortName: "itn",
 *   number: 1,
 * }) // v0.19.2
 * ```
 */
class CustomChain {
    constructor(chainIdParts) {
        this.feeDenom = "unibi";
        this.initChainId = () => {
            const { prefix, shortName, number } = this.chainIdParts;
            return [prefix, shortName, number].join("-");
        };
        this.chainIdParts = chainIdParts;
        this.chainId = this.initChainId();
        this.chainName = this.chainId;
        this.endptTm = `https://rpc.${chainIdParts.shortName}-${chainIdParts.number}.nibiru.fi`;
        this.endptRest = `https://lcd.${chainIdParts.shortName}-${chainIdParts.number}.nibiru.fi`;
        this.endptGrpc = `grpc.${chainIdParts.shortName}-${chainIdParts.number}.nibiru.fi`;
    }
    static fromChainId(chainId) {
        const parts = chainId.split("-");
        const chainIdParts = {
            prefix: parts[0],
            shortName: parts[1],
            number: Number(parts[2]),
        };
        return new CustomChain(chainIdParts);
    }
}
exports.CustomChain = CustomChain;
exports.Localnet = {
    endptTm: "http://127.0.0.1:26657",
    endptRest: "http://127.0.0.1:1317",
    endptGrpc: "http://127.0.0.1:9090",
    chainId: "nibiru-localnet-0",
    chainName: "Nibiru Localnet (Default)",
    feeDenom: "unibi",
};
const IncentivizedTestnet = (chainNumber) => new CustomChain({
    prefix: "nibiru",
    shortName: "itn",
    number: chainNumber,
});
exports.IncentivizedTestnet = IncentivizedTestnet;
const Devnet = (chainNumber) => new CustomChain({
    prefix: "nibiru",
    shortName: "devnet",
    number: chainNumber,
});
exports.Devnet = Devnet;
const queryChainIdWithRest = (chain) => __awaiter(void 0, void 0, void 0, function* () {
    const queryChainId = (chain) => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield (0, cross_fetch_1.fetch)(`${chain.endptRest}/cosmos/base/tendermint/v1beta1/node_info`);
        const nodeInfo = yield response.json();
        return nodeInfo.default_node_info.network;
    });
    const { res: chainId, err } = yield (0, types_1.go)(queryChainId(chain));
    return [chainId !== null && chainId !== void 0 ? chainId : "", err];
});
exports.queryChainIdWithRest = queryChainIdWithRest;
const isRestEndptLive = (chain) => __awaiter(void 0, void 0, void 0, function* () {
    const [_chainId, err] = yield (0, exports.queryChainIdWithRest)(chain);
    return err === undefined;
});
exports.isRestEndptLive = isRestEndptLive;
/**
 * Converts a Chain object to its constituent parts.
 * @param chain a Chain object
 * @returns a ChainIdParts object
 */
const chainToParts = (chain) => {
    const parts = chain.chainId.split("-");
    return {
        prefix: parts[0],
        shortName: parts[1],
        number: Number(parts[2]),
    };
};
exports.chainToParts = chainToParts;
//# sourceMappingURL=chain.js.map