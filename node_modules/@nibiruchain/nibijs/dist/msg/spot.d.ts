import { EncodeObject, GeneratedType } from "@cosmjs/proto-signing";
import { MsgCreatePool, MsgExitPool, MsgJoinPool, MsgSwapAssets } from "@nibiruchain/protojs/dist/nibiru/spot/v1/tx";
import { TxMessage } from "./encode-types";
export declare const SPOT_MSG_TYPE_URLS: {
    MsgCreatePool: string;
    MsgJoinPool: string;
    MsgExitPool: string;
    MsgSwapAssets: string;
};
export declare const spotTypes: ReadonlyArray<[string, GeneratedType]>;
export interface MsgCreatePoolEncodeObject extends EncodeObject {
    readonly typeUrl: string;
    readonly value: Partial<MsgCreatePool>;
}
export declare const isMsgCreatePoolEncodeObject: (encodeObject: EncodeObject) => boolean;
export interface MsgJoinPoolEncodeObject extends EncodeObject {
    readonly typeUrl: string;
    readonly value: Partial<MsgJoinPool>;
}
export declare const isMsgJoinPoolEncodeObject: (encodeObject: EncodeObject) => boolean;
export interface MsgExitPoolEncodeObject extends EncodeObject {
    readonly typeUrl: string;
    readonly value: Partial<MsgExitPool>;
}
export declare const isMsgExitPoolEncodeObject: (encodeObject: EncodeObject) => boolean;
export interface MsgSwapAssetsEncodeObject extends EncodeObject {
    readonly typeUrl: string;
    readonly value: Partial<MsgSwapAssets>;
}
export declare const isMsgSwapAssetsEncodeObject: (encodeObject: EncodeObject) => boolean;
export declare class SpotMsgFactory {
    static createPool(msg: MsgCreatePool): TxMessage;
    static joinPool({ poolId, sender, tokensIn, useAllCoins, }: MsgJoinPool): TxMessage;
    static exitPool({ poolId, sender, poolShares }: MsgExitPool): TxMessage;
    static swapAssets({ poolId, sender, tokenOutDenom, tokenIn, }: MsgSwapAssets): TxMessage;
}
//# sourceMappingURL=spot.d.ts.map