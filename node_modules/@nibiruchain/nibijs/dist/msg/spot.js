"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotMsgFactory = exports.isMsgSwapAssetsEncodeObject = exports.isMsgExitPoolEncodeObject = exports.isMsgJoinPoolEncodeObject = exports.isMsgCreatePoolEncodeObject = exports.spotTypes = exports.SPOT_MSG_TYPE_URLS = void 0;
const tx_1 = require("@nibiruchain/protojs/dist/nibiru/spot/v1/tx");
const chain_1 = require("../chain");
exports.SPOT_MSG_TYPE_URLS = {
    MsgCreatePool: `/${tx_1.protobufPackage}.MsgCreatePool`,
    MsgJoinPool: `/${tx_1.protobufPackage}.MsgJoinPool`,
    MsgExitPool: `/${tx_1.protobufPackage}.MsgExitPool`,
    MsgSwapAssets: `/${tx_1.protobufPackage}.MsgSwapAssets`,
};
exports.spotTypes = [
    [exports.SPOT_MSG_TYPE_URLS.MsgCreatePool, tx_1.MsgCreatePool],
    [exports.SPOT_MSG_TYPE_URLS.MsgJoinPool, tx_1.MsgJoinPool],
    [exports.SPOT_MSG_TYPE_URLS.MsgExitPool, tx_1.MsgExitPool],
    [exports.SPOT_MSG_TYPE_URLS.MsgSwapAssets, tx_1.MsgSwapAssets],
];
const isMsgCreatePoolEncodeObject = (encodeObject) => encodeObject.typeUrl === exports.SPOT_MSG_TYPE_URLS.MsgCreatePool;
exports.isMsgCreatePoolEncodeObject = isMsgCreatePoolEncodeObject;
const isMsgJoinPoolEncodeObject = (encodeObject) => encodeObject.typeUrl === exports.SPOT_MSG_TYPE_URLS.MsgJoinPool;
exports.isMsgJoinPoolEncodeObject = isMsgJoinPoolEncodeObject;
const isMsgExitPoolEncodeObject = (encodeObject) => encodeObject.typeUrl === exports.SPOT_MSG_TYPE_URLS.MsgExitPool;
exports.isMsgExitPoolEncodeObject = isMsgExitPoolEncodeObject;
const isMsgSwapAssetsEncodeObject = (encodeObject) => encodeObject.typeUrl === exports.SPOT_MSG_TYPE_URLS.MsgSwapAssets;
exports.isMsgSwapAssetsEncodeObject = isMsgSwapAssetsEncodeObject;
// ----------------------------------------------------------------------------
class SpotMsgFactory {
    static createPool(msg) {
        if (msg.poolParams) {
            const { swapFee, exitFee } = msg.poolParams;
            msg.poolParams.swapFee = (0, chain_1.toSdkDec)(swapFee);
            msg.poolParams.exitFee = (0, chain_1.toSdkDec)(exitFee);
        }
        return {
            typeUrl: `/${tx_1.protobufPackage}.MsgCreatePool`,
            value: tx_1.MsgCreatePool.fromPartial(msg),
        };
    }
    static joinPool({ poolId, sender, tokensIn, useAllCoins, }) {
        return {
            typeUrl: `/${tx_1.protobufPackage}.MsgJoinPool`,
            value: tx_1.MsgJoinPool.fromPartial({
                poolId: Number(poolId),
                sender,
                tokensIn,
                useAllCoins,
            }),
        };
    }
    static exitPool({ poolId, sender, poolShares }) {
        return {
            typeUrl: `/${tx_1.protobufPackage}.MsgExitPool`,
            value: tx_1.MsgExitPool.fromPartial({
                poolId: Number(poolId),
                sender,
                poolShares,
            }),
        };
    }
    static swapAssets({ poolId, sender, tokenOutDenom, tokenIn, }) {
        return {
            typeUrl: `/${tx_1.protobufPackage}.MsgSwapAssets`,
            value: tx_1.MsgSwapAssets.fromPartial({
                poolId: Number(poolId),
                sender,
                tokenIn,
                tokenOutDenom,
            }),
        };
    }
}
exports.SpotMsgFactory = SpotMsgFactory;
//# sourceMappingURL=spot.js.map