"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupPerpExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("@nibiruchain/protojs/dist/nibiru/perp/v2/query");
const chain_1 = require("../chain");
function transformPosition(resp) {
    const { positionNotional: pn, unrealizedPnl: upnl, marginRatio: mr } = resp;
    resp.positionNotional = (0, chain_1.fromSdkDec)(pn).toString();
    resp.unrealizedPnl = (0, chain_1.fromSdkDec)(upnl).toString();
    resp.marginRatio = (0, chain_1.fromSdkDec)(mr).toString();
    return resp;
}
function setupPerpExtension(base) {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new query_1.QueryClientImpl(rpcClient);
    return {
        perp: {
            moduleAccounts: () => __awaiter(this, void 0, void 0, function* () {
                const req = query_1.QueryModuleAccountsRequest.fromPartial({});
                const resp = yield queryService.ModuleAccounts(req);
                return resp;
            }),
            position: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = query_1.QueryPositionRequest.fromPartial(args);
                const resp = yield queryService.QueryPosition(req);
                return transformPosition(resp);
            }),
            positions: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = query_1.QueryPositionsRequest.fromPartial(args);
                const resp = yield queryService.QueryPositions(req);
                function transformPositions(resp) {
                    const { positions } = resp;
                    resp.positions = positions.map((position) => transformPosition(position));
                    return resp;
                }
                return transformPositions(resp);
            }),
            markets: () => __awaiter(this, void 0, void 0, function* () {
                const req = query_1.QueryMarketsRequest.fromPartial({});
                const resp = queryService.QueryMarkets(req);
                return resp;
            }),
        },
    };
}
exports.setupPerpExtension = setupPerpExtension;
//# sourceMappingURL=perp.js.map