"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupOracleExtension = void 0;
/**
 * @fileoverview query extension for the "oracle" module
 */
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("@nibiruchain/protojs/dist/nibiru/oracle/v1/query");
const chain_1 = require("../chain");
const newExchangeRatesMap = (resp) => {
    const ratesMap = {};
    resp.exchangeRates.forEach((exchangeRateTuple) => {
        const { exchangeRate, pair } = exchangeRateTuple;
        ratesMap[pair] = (0, chain_1.fromSdkDec)(exchangeRate);
    });
    return ratesMap;
};
const setupOracleExtension = (base) => {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new query_1.QueryClientImpl(rpcClient);
    return {
        oracle: {
            actives: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryActivesRequest.fromPartial({});
                const resp = yield queryService.Actives(req);
                return resp;
            }),
            aggregatePrevote: (oracle) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryAggregatePrevoteRequest.fromPartial({
                    validatorAddr: oracle,
                });
                const resp = yield queryService.AggregatePrevote(req);
                return resp.aggregatePrevote;
            }),
            aggregatePrevotes: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryAggregatePrevotesRequest.fromPartial({});
                const resp = yield queryService.AggregatePrevotes(req);
                return resp.aggregatePrevotes;
            }),
            aggregateVote: (oracle) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryAggregateVoteRequest.fromPartial({
                    validatorAddr: oracle,
                });
                const resp = yield queryService.AggregateVote(req);
                return resp.aggregateVote;
            }),
            aggregateVotes: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryAggregateVotesRequest.fromPartial({});
                const resp = yield queryService.AggregateVotes(req);
                return resp.aggregateVotes;
            }),
            exchangeRate: (pair) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryExchangeRateRequest.fromPartial({ pair });
                const resp = yield queryService.ExchangeRate(req);
                return (0, chain_1.fromSdkDec)(resp.exchangeRate);
            }),
            exchangeRates: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryExchangeRatesRequest.fromPartial({});
                const resp = yield queryService.ExchangeRates(req);
                const ratesMap = newExchangeRatesMap(resp);
                return ratesMap;
            }),
            feeder: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryFeederDelegationRequest.fromPartial({});
                const resp = yield queryService.FeederDelegation(req);
                return resp.feederAddr;
            }),
            missCount: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryMissCounterRequest.fromPartial({});
                const resp = yield queryService.MissCounter(req);
                return resp.missCounter.toNumber();
            }),
            params: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryParamsRequest.fromPartial({});
                const resp = yield queryService.Params(req);
                return resp;
            }),
            voteTargets: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryVoteTargetsRequest.fromPartial({});
                const resp = yield queryService.VoteTargets(req);
                return resp.voteTargets;
            }),
        },
    };
};
exports.setupOracleExtension = setupOracleExtension;
//# sourceMappingURL=oracle.js.map