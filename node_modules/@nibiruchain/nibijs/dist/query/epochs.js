"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupEpochsExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("@nibiruchain/protojs/dist/nibiru/epochs/v1/query");
const setupEpochsExtension = (base) => {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new query_1.QueryClientImpl(rpcClient);
    return {
        epochs: {
            currentEpoch: (args) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryCurrentEpochRequest.fromPartial(args);
                const resp = yield queryService.CurrentEpoch(req);
                return resp;
            }),
            epochsInfo: () => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryEpochsInfoRequest.fromPartial({});
                const resp = yield queryService.EpochInfos(req);
                return resp;
            }),
        },
    };
};
exports.setupEpochsExtension = setupEpochsExtension;
//# sourceMappingURL=epochs.js.map