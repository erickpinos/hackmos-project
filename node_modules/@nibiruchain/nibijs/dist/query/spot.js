"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupSpotExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("@nibiruchain/protojs/dist/nibiru/spot/v1/query");
const chain_1 = require("../chain");
function transformPoolParams(pp) {
    if (pp) {
        pp.swapFee = (0, chain_1.fromSdkDec)(pp === null || pp === void 0 ? void 0 : pp.swapFee).toString();
        pp.exitFee = (0, chain_1.fromSdkDec)(pp === null || pp === void 0 ? void 0 : pp.exitFee).toString();
    }
    return pp;
}
function transformPool(p) {
    if (!p) {
        return p;
    }
    p.poolParams = transformPoolParams(p.poolParams);
    return p;
}
const setupSpotExtension = (base) => {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new query_1.QueryClientImpl(rpcClient);
    return {
        spot: {
            params: () => {
                const req = query_1.QueryParamsRequest.fromPartial({});
                return queryService.Params(req);
            },
            poolNumber: () => {
                const req = query_1.QueryPoolNumberRequest.fromPartial({});
                return queryService.PoolNumber(req);
            },
            pool: (poolId) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryPoolRequest.fromPartial({ poolId });
                const resp = yield queryService.Pool(req);
                resp.pool = transformPool(resp.pool);
                return resp;
            }),
            pools: (pagination) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryPoolsRequest.fromPartial({ pagination });
                const resp = yield queryService.Pools(req);
                resp.pools = resp.pools.map((p) => transformPool(p));
                return resp;
            }),
            poolParams: (poolId) => __awaiter(void 0, void 0, void 0, function* () {
                const req = query_1.QueryPoolParamsRequest.fromPartial({ poolId });
                const resp = yield queryService.PoolParams(req);
                resp.poolParams = transformPoolParams(resp.poolParams);
                return resp;
            }),
            numPools: () => {
                const req = query_1.QueryNumPoolsRequest.fromPartial({});
                return queryService.NumPools(req);
            },
            totalLiquidity: () => {
                const req = query_1.QueryTotalLiquidityRequest.fromPartial({});
                return queryService.TotalLiquidity(req);
            },
            totalPoolLiquidity: (poolId) => {
                const req = query_1.QueryTotalPoolLiquidityRequest.fromPartial({
                    poolId,
                });
                return queryService.TotalPoolLiquidity(req);
            },
            totalShares: (poolId) => {
                const req = query_1.QueryTotalSharesRequest.fromPartial({ poolId });
                return queryService.TotalShares(req);
            },
            spotPrice: (poolId, tokenInDenom, tokenOutDenom) => {
                const req = query_1.QuerySpotPriceRequest.fromPartial({
                    poolId,
                    tokenInDenom,
                    tokenOutDenom,
                });
                return queryService.SpotPrice(req);
            },
            estimateSwapExactAmountIn: (poolId, tokenOutDenom, tokenIn) => {
                const req = query_1.QuerySwapExactAmountInRequest.fromPartial({
                    poolId,
                    tokenOutDenom,
                    tokenIn,
                });
                return queryService.EstimateSwapExactAmountIn(req);
            },
            estimateSwapExactAmountOut: (poolId, tokenInDenom, tokenOut) => {
                const req = query_1.QuerySwapExactAmountOutRequest.fromPartial({
                    poolId,
                    tokenInDenom,
                    tokenOut,
                });
                return queryService.EstimateSwapExactAmountOut(req);
            },
            estimateJoinExactAmountIn: (poolId, tokensIn) => {
                const req = query_1.QueryJoinExactAmountInRequest.fromPartial({
                    poolId,
                    tokensIn,
                });
                return queryService.EstimateJoinExactAmountIn(req);
            },
            estimateJoinExactAmountOut: (poolId) => {
                const req = query_1.QueryJoinExactAmountOutRequest.fromPartial({
                    poolId,
                });
                return queryService.EstimateJoinExactAmountOut(req);
            },
            estimateExitExactAmountIn: (poolId, poolSharesIn) => {
                const req = query_1.QueryExitExactAmountInRequest.fromPartial({
                    poolId,
                    poolSharesIn: poolSharesIn.toString(),
                });
                return queryService.EstimateExitExactAmountIn(req);
            },
            estimateExitExactAmountOut: (poolId) => {
                const req = query_1.QueryExitExactAmountOutRequest.fromPartial({
                    poolId,
                });
                return queryService.EstimateExitExactAmountOut(req);
            },
        },
    };
};
exports.setupSpotExtension = setupSpotExtension;
//# sourceMappingURL=spot.js.map