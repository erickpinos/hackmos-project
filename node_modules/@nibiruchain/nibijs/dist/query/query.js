"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NibiruQueryClient = void 0;
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const cosmwasm_stargate_1 = require("@cosmjs/cosmwasm-stargate");
const epochs_1 = require("./epochs");
const oracle_1 = require("./oracle");
const perp_1 = require("./perp");
const spot_1 = require("./spot");
const sudo_1 = require("./sudo");
const inflation_1 = require("./inflation");
class NibiruQueryClient extends stargate_1.StargateClient {
    static connect(endpoint, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const tmClient = yield tendermint_rpc_1.Tendermint37Client.connect(endpoint);
            const wasmClient = yield cosmwasm_stargate_1.CosmWasmClient.connect(endpoint);
            return new NibiruQueryClient(tmClient, options, wasmClient);
        });
    }
    constructor(tmClient, options, wasmClient) {
        super(tmClient, options);
        this.wasmClient = wasmClient;
        this.nibiruExtensions = stargate_1.QueryClient.withExtensions(tmClient, epochs_1.setupEpochsExtension, oracle_1.setupOracleExtension, perp_1.setupPerpExtension, sudo_1.setupSudoExtension, inflation_1.setupInflationExtension, spot_1.setupSpotExtension, stargate_1.setupDistributionExtension, stargate_1.setupGovExtension, stargate_1.setupStakingExtension, stargate_1.setupIbcExtension, cosmwasm_stargate_1.setupWasmExtension, stargate_1.setupAuthExtension);
    }
    waitForHeight(height) {
        return __awaiter(this, void 0, void 0, function* () {
            while ((yield this.getHeight()) < height) {
                yield new Promise((resolve) => {
                    setTimeout(resolve, 300);
                });
            }
        });
    }
    waitForNextBlock() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentHeight = yield this.getHeight();
            while (currentHeight >= (yield this.getHeight())) {
                yield new Promise((resolve) => {
                    setTimeout(resolve, 300);
                });
            }
        });
    }
}
exports.NibiruQueryClient = NibiruQueryClient;
//# sourceMappingURL=query.js.map