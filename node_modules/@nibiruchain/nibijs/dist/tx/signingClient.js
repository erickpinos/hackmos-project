"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NibiruSigningClient = exports.nibiruRegistryTypes = void 0;
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const cosmwasm_stargate_1 = require("@cosmjs/cosmwasm-stargate");
const msg_1 = require("../msg");
const query_1 = require("../query");
exports.nibiruRegistryTypes = [
    ...stargate_1.defaultRegistryTypes,
    ...msg_1.perpTypes,
    ...msg_1.spotTypes,
];
class NibiruSigningClient extends stargate_1.SigningStargateClient {
    static connectWithSigner(endpoint, signer, options = {}, wasmOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const tmClient = yield tendermint_rpc_1.Tendermint37Client.connect(endpoint);
            const wasmClient = yield cosmwasm_stargate_1.SigningCosmWasmClient.connectWithSigner(endpoint, signer, Object.assign({ gasPrice: stargate_1.GasPrice.fromString("0.025unibi") }, wasmOptions));
            return new NibiruSigningClient(tmClient, signer, Object.assign({ registry: new proto_signing_1.Registry(exports.nibiruRegistryTypes), gasPrice: stargate_1.GasPrice.fromString("0.025unibi"), broadcastPollIntervalMs: 1000 }, options), wasmClient);
        });
    }
    constructor(tmClient, signer, options, wasm) {
        super(tmClient, signer, options);
        this.wasmClient = wasm;
        this.nibiruExtensions = stargate_1.QueryClient.withExtensions(tmClient, query_1.setupEpochsExtension, query_1.setupOracleExtension, query_1.setupPerpExtension, query_1.setupSpotExtension, query_1.setupSudoExtension, query_1.setupInflationExtension, stargate_1.setupDistributionExtension, stargate_1.setupGovExtension, stargate_1.setupStakingExtension, stargate_1.setupIbcExtension, cosmwasm_stargate_1.setupWasmExtension, stargate_1.setupAuthExtension);
    }
    waitForHeight(height) {
        return __awaiter(this, void 0, void 0, function* () {
            while ((yield this.getHeight()) < height) {
                yield new Promise((resolve) => {
                    setTimeout(resolve, 300);
                });
            }
        });
    }
    waitForNextBlock() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentHeight = yield this.getHeight();
            while (currentHeight == (yield this.getHeight())) {
                yield new Promise((resolve) => {
                    setTimeout(resolve, 300);
                });
            }
        });
    }
}
exports.NibiruSigningClient = NibiruSigningClient;
//# sourceMappingURL=signingClient.js.map